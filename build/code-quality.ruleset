<?xml version="1.0" encoding="utf-8"?>
<RuleSet Name="Authentication Project Code Quality Rules" Description="Code quality rules for preventing else statements and enforcing SOLID principles" ToolsVersion="17.0">
  
  <!-- General Rules -->
  <Rules AnalyzerId="Microsoft.CodeAnalysis.CSharp" RuleNamespace="Microsoft.CodeAnalysis.CSharp">
    <!-- Enforce conditional expressions instead of if-else return statements -->
    <Rule Id="IDE0046" Action="Error" />
    <!-- Enforce conditional expressions instead of if-else assignments -->
    <Rule Id="IDE0045" Action="Error" />
    <!-- Use expression body for methods -->
    <Rule Id="IDE0022" Action="Warning" />
    <!-- Use expression body for properties -->
    <Rule Id="IDE0025" Action="Warning" />
  </Rules>

  <!-- SonarAnalyzer Rules - SOLID Principles & Clean Code -->
  <Rules AnalyzerId="SonarAnalyzer.CSharp" RuleNamespace="SonarAnalyzer.CSharp">
    <!-- Cognitive Complexity of methods should not be too high -->
    <Rule Id="S3776" Action="Warning" />
    <!-- Methods should not be too complex -->
    <Rule Id="S1541" Action="Warning" />
    <!-- Classes should not have too many responsibilities -->
    <Rule Id="S1200" Action="Warning" />
    <!-- Interfaces should be cohesive -->
    <Rule Id="S4144" Action="Warning" />
    <!-- Methods should not have identical implementations -->
    <Rule Id="S4144" Action="Warning" />
    <!-- Dead stores should be removed -->
    <Rule Id="S1854" Action="Warning" />
    <!-- Empty statements should be removed -->
    <Rule Id="S1116" Action="Error" />
    <!-- Control flow statements should not be nested too deeply -->
    <Rule Id="S134" Action="Warning" />
    <!-- Methods should not be empty -->
    <Rule Id="S1186" Action="Warning" />
    <!-- Classes should not be empty -->
    <Rule Id="S2094" Action="Warning" />
    <!-- Methods with high cyclomatic complexity should be split -->
    <Rule Id="S1142" Action="Warning" />
    <!-- Return statements should not be redundant -->
    <Rule Id="S3626" Action="Error" />
    <!-- Conditional operators should not be nested -->
    <Rule Id="S3358" Action="Warning" />
    <!-- Generic exceptions should not be thrown -->
    <Rule Id="S112" Action="Warning" />
    <!-- Exceptions should not be thrown from finally blocks -->
    <Rule Id="S1163" Action="Error" />
    <!-- Methods should not have too many parameters -->
    <Rule Id="S107" Action="Warning" />
  </Rules>

  <!-- Microsoft .NET Analyzers -->
  <Rules AnalyzerId="Microsoft.CodeAnalysis.NetAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.NetAnalyzers">
    <!-- Design Rules -->
    <Rule Id="CA1001" Action="Warning" />  <!-- Types that own disposable fields should be disposable -->
    <Rule Id="CA1009" Action="Warning" />  <!-- Declare event handlers correctly -->
    <Rule Id="CA1016" Action="Warning" />  <!-- Mark assemblies with assembly version -->
    <Rule Id="CA1033" Action="Warning" />  <!-- Interface methods should be callable by child types -->
    <Rule Id="CA1049" Action="Warning" />  <!-- Types that own native resources should be disposable -->
    <Rule Id="CA1060" Action="Warning" />  <!-- Move pinvokes to native methods class -->
    <Rule Id="CA1061" Action="Warning" />  <!-- Do not hide base class methods -->
    <Rule Id="CA1063" Action="Warning" />  <!-- Implement IDisposable Correctly -->
    <Rule Id="CA1065" Action="Warning" />  <!-- Do not raise exceptions in unexpected locations -->
    <Rule Id="CA1301" Action="Warning" />  <!-- Avoid duplicate accelerators -->
    <Rule Id="CA1400" Action="Warning" />  <!-- P/Invoke entry points should exist -->
    <Rule Id="CA1401" Action="Warning" />  <!-- P/Invokes should not be visible -->
    <Rule Id="CA1403" Action="Warning" />  <!-- Auto layout types should not be COM visible -->
    <Rule Id="CA1404" Action="Warning" />  <!-- Call GetLastError immediately after P/Invoke -->
    <Rule Id="CA1405" Action="Warning" />  <!-- COM visible type base types should be COM visible -->
    <Rule Id="CA1410" Action="Warning" />  <!-- COM registration methods should be matched -->
    <Rule Id="CA1415" Action="Warning" />  <!-- Declare P/Invokes correctly -->
    <Rule Id="CA1515" Action="None" />     <!-- Make types internal (disabled to preserve intended visibility) -->
    <Rule Id="CA1821" Action="Warning" />  <!-- Remove empty Finalizers -->
    <Rule Id="CA1900" Action="Warning" />  <!-- Value type fields should be portable -->
    <Rule Id="CA1901" Action="Warning" />  <!-- P/Invoke declarations should be portable -->
    <Rule Id="CA2002" Action="Warning" />  <!-- Do not lock on objects with weak identity -->
    <Rule Id="CA2100" Action="Warning" />  <!-- Review SQL queries for security vulnerabilities -->
    <Rule Id="CA2101" Action="Warning" />  <!-- Specify marshaling for P/Invoke string arguments -->
    <Rule Id="CA2108" Action="Warning" />  <!-- Review declarative security on value types -->
    <Rule Id="CA2111" Action="Warning" />  <!-- Pointers should not be visible -->
    <Rule Id="CA2112" Action="Warning" />  <!-- Secured types should not expose fields -->
    <Rule Id="CA2114" Action="Warning" />  <!-- Method security should be a superset of type -->
    <Rule Id="CA2116" Action="Warning" />  <!-- APTCA methods should only call APTCA methods -->
    <Rule Id="CA2117" Action="Warning" />  <!-- APTCA types should only extend APTCA base types -->
    <Rule Id="CA2122" Action="Warning" />  <!-- Do not indirectly expose methods with link demands -->
    <Rule Id="CA2123" Action="Warning" />  <!-- Override link demands should be identical to base -->
    <Rule Id="CA2124" Action="Warning" />  <!-- Wrap vulnerable finally clauses in outer try -->
    <Rule Id="CA2126" Action="Warning" />  <!-- Type link demands require inheritance demands -->
    <Rule Id="CA2131" Action="Warning" />  <!-- Security critical types may not participate in type equivalence -->
    <Rule Id="CA2132" Action="Warning" />  <!-- Default constructors must be at least as critical as base type default constructors -->
    <Rule Id="CA2133" Action="Warning" />  <!-- Arrays must contain elements with consistent transparency -->
    <Rule Id="CA2134" Action="Warning" />  <!-- Methods must keep consistent transparency when overriding base methods -->
    <Rule Id="CA2137" Action="Warning" />  <!-- Transparent methods must contain only verifiable IL -->
    <Rule Id="CA2138" Action="Warning" />  <!-- Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute -->
    <Rule Id="CA2140" Action="Warning" />  <!-- Transparent code must not reference security critical items -->
    <Rule Id="CA2141" Action="Warning" />  <!-- Transparent methods must not satisfy LinkDemands -->
    <Rule Id="CA2146" Action="Warning" />  <!-- Types must be at least as critical as their base types and interfaces -->
    <Rule Id="CA2147" Action="Warning" />  <!-- Transparent methods may not use security asserts -->
    <Rule Id="CA2149" Action="Warning" />  <!-- Transparent methods must not call into native code -->
    <Rule Id="CA2200" Action="Warning" />  <!-- Rethrow to preserve stack details -->
    <Rule Id="CA2202" Action="Warning" />  <!-- Do not dispose objects multiple times -->
    <Rule Id="CA2207" Action="Warning" />  <!-- Initialize value type static fields inline -->
    <Rule Id="CA2212" Action="Warning" />  <!-- Do not mark serviced components with WebMethod -->
    <Rule Id="CA2213" Action="Warning" />  <!-- Disposable fields should be disposed -->
    <Rule Id="CA2214" Action="Warning" />  <!-- Do not call overridable methods in constructors -->
    <Rule Id="CA2216" Action="Warning" />  <!-- Disposable types should declare finalizer -->
    <Rule Id="CA2220" Action="Warning" />  <!-- Finalizers should call base class finalizer -->
    <Rule Id="CA2229" Action="Warning" />  <!-- Implement serialization constructors -->
    <Rule Id="CA2231" Action="Warning" />  <!-- Overload operator equals on overriding value type Equals -->
    <Rule Id="CA2232" Action="Warning" />  <!-- Mark Windows Forms entry points with STAThread -->
    <Rule Id="CA2235" Action="Warning" />  <!-- Mark all non-serializable fields -->
    <Rule Id="CA2236" Action="Warning" />  <!-- Call base class methods on ISerializable types -->
    <Rule Id="CA2237" Action="Warning" />  <!-- Mark ISerializable types with serializable -->
    <Rule Id="CA2238" Action="Warning" />  <!-- Implement serialization methods correctly -->
    <Rule Id="CA2240" Action="Warning" />  <!-- Implement ISerializable correctly -->
    <Rule Id="CA2241" Action="Warning" />  <!-- Provide correct arguments to formatting methods -->
    <Rule Id="CA2242" Action="Warning" />  <!-- Test for NaN correctly -->
  </Rules>

  <!-- StyleCop Rules -->
  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers">
    <!-- Readability Rules -->
    <Rule Id="SA1101" Action="None" />     <!-- Prefix local calls with this -->
    <Rule Id="SA1200" Action="None" />     <!-- Using directives should be placed correctly -->
    <Rule Id="SA1633" Action="None" />     <!-- File should have header -->
    <Rule Id="SA1652" Action="None" />     <!-- Enable XML documentation output -->
  </Rules>

</RuleSet>