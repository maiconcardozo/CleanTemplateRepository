name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Verify .NET version
      run: dotnet --version
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore Solution/Authentication.sln
    
    - name: Build solution
      run: dotnet build Solution/Authentication.sln --configuration Release --no-restore
    
    - name: Run tests with detailed reporting
      run: |
        echo "🧪 Running test suite..."
        dotnet test Solution/Authentication.sln \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --logger "console;verbosity=detailed" \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      continue-on-error: false
    
    - name: Test Results Summary
      run: |
        echo "📊 Test Results Summary"
        echo "======================="
        if [ -d "TestResults" ]; then
          echo "✅ Test results generated successfully"
          find TestResults -name "*.trx" | wc -l | xargs echo "📁 TRX files found:"
          find TestResults -name "*.xml" | wc -l | xargs echo "📊 Coverage files found:"
          
          # Display test summary if available
          if command -v trx2junit &> /dev/null; then
            echo "🔍 Converting test results..."
          else
            echo "📋 TRX files located in TestResults/ directory"
          fi
        else
          echo "❌ No test results directory found"
        fi
      if: always()
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: TestResults/
        retention-days: 30
        
    - name: Generate coverage report
      run: |
        echo "📈 Generating coverage report..."
        dotnet test Solution/Authentication.sln \
          --configuration Release \
          --no-build \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults/Coverage \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
          
        echo "📊 Coverage Summary:"
        if [ -d "TestResults/Coverage" ]; then
          find TestResults/Coverage -name "coverage.cobertura.xml" | head -1 | while read file; do
            if [ -f "$file" ]; then
              echo "✅ Coverage file generated: $file"
              # Extract line coverage percentage if possible
              if command -v xmllint &> /dev/null; then
                COVERAGE=$(xmllint --xpath "string(//coverage/@line-rate)" "$file" 2>/dev/null || echo "N/A")
                if [ "$COVERAGE" != "N/A" ] && [ "$COVERAGE" != "" ]; then
                  PERCENTAGE=$(echo "$COVERAGE * 100" | bc -l 2>/dev/null | cut -d. -f1 2>/dev/null || echo "N/A")
                  echo "📊 Line Coverage: ${PERCENTAGE}%"
                fi
              fi
            fi
          done
        else
          echo "❌ Coverage directory not found"
        fi
      continue-on-error: true
      
    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ github.run_number }}
        path: TestResults/Coverage/
        retention-days: 30

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore Solution/Authentication.sln
      
    - name: Check code formatting
      run: dotnet format Solution/Authentication.sln --verify-no-changes --verbosity diagnostic
      continue-on-error: true
      
    - name: Build with code analysis (else statement prevention)
      run: |
        echo "🔍 Building with else statement prevention rules..."
        dotnet build Solution/Authentication.sln \
          --configuration Release \
          --verbosity normal \
          /p:TreatWarningsAsErrors=false \
          /warnaserror:IDE0046,IDE0045 \
          /p:EnforceCodeStyleInBuild=true
          
    - name: Check for SOLID principle violations
      run: |
        echo "🏗️ Checking SOLID principles and clean code violations..."
        dotnet build Solution/Authentication.sln \
          --configuration Release \
          --verbosity normal \
          /p:TreatWarningsAsErrors=false \
          /warnaserror:S3776,S1541,S1200,S4144,S1854,S1116,S134,S1186,S2094,S1142,S3626,S112,S1163,S107 \
          /p:EnforceCodeStyleInBuild=true
      
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore dependencies
      run: dotnet restore Solution/Authentication.sln
      
    - name: Check for vulnerable packages
      run: dotnet list Solution/Authentication.sln package --vulnerable --include-transitive
      continue-on-error: true
      
    - name: Check for deprecated packages
      run: dotnet list Solution/Authentication.sln package --deprecated
      continue-on-error: true

  build-info:
    name: Build Information
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Display build information
      run: |
        echo "📊 Build Information"
        echo "===================="
        echo "🔧 .NET Version: $(dotnet --version)"
        echo "🏠 Repository: ${{ github.repository }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Actor: ${{ github.actor }}"
        echo "🎯 Event: ${{ github.event_name }}"
        
    - name: Solution analysis
      run: |
        echo "📁 Solution Structure:"
        echo "====================="
        find . -name "*.csproj" -type f | head -10
        echo ""
        echo "📦 NuGet packages summary:"
        dotnet list Solution/Authentication.sln package | head -20